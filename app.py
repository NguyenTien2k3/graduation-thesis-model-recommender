import pickle
import pandas as pd
from flask import Flask, request, jsonify
import os
import logging
import requests
import io  # ƒê·ªçc CSV t·ª´ bytes

# ========== C·∫•u h√¨nh logging ==========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
logger = logging.getLogger(__name__)

app = Flask(__name__)


# ====== H√†m load model an to√†n ======
def safe_load_pickle(url_or_path, name):
    logger.info(f"üîπ B·∫Øt ƒë·∫ßu load model '{name}' t·ª´: {url_or_path}")
    try:
        if url_or_path.startswith("http"):
            response = requests.get(url_or_path)
            response.raise_for_status()
            model = pickle.loads(response.content)
        else:
            with open(url_or_path, "rb") as f:
                model = pickle.load(f)
        logger.info(f"‚úÖ Load model '{name}' th√†nh c√¥ng.")
        return model
    except (FileNotFoundError, requests.exceptions.RequestException, Exception) as e:
        logger.error(f"‚ùå L·ªói khi load '{url_or_path}' cho {name}: {e}")
        return None


# ====== Load model SVD ======
model_url = "./svd_model_nf32_lr0.001_reg0.05_ep40_p1.0_balanced.pkl"
topk_model = safe_load_pickle(model_url, "Top-K SVD model")


# ====== H√†m load CSV an to√†n ======
def safe_load_csv(url_or_path):
    logger.info(f"üîπ ƒêang load file CSV: {url_or_path}")
    try:
        if url_or_path.startswith("http"):
            response = requests.get(url_or_path)
            response.raise_for_status()
            df = pd.read_csv(io.BytesIO(response.content))
        else:
            df = pd.read_csv(url_or_path)
        logger.info(f"‚úÖ ƒê·ªçc CSV th√†nh c√¥ng, c√≥ {len(df)} d√≤ng.")
        return df
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi load CSV t·ª´ '{url_or_path}': {e}")
        return None


# ====== Load danh s√°ch item ======
def load_items():
    csv_url = "./Cell_Phones_and_Accessories.train.csv"
    items_df = safe_load_csv(csv_url)
    if items_df is None:
        logger.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ load danh s√°ch item (CSV r·ªóng ho·∫∑c l·ªói).")
        return []
    try:
        # X·ª≠ l√Ω parent_asin c√≥ th·ªÉ ch·ª©a nhi·ªÅu gi√° tr·ªã (ch·ªâ l·∫•y gi√° tr·ªã ƒë·∫ßu)
        items_df["parent_asin"] = (
            items_df["parent_asin"].astype(str).str.split(",").str[0]
        )
        unique_items = items_df["parent_asin"].dropna().unique().tolist()
        logger.info(f"‚úÖ ƒê√£ load {len(unique_items)} item duy nh·∫•t.")
        return unique_items
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu CSV: {e}")
        return []


item_ids = load_items()


# ====== Logic g·ª£i √Ω top-K ======
def get_top_k_recommendations(user_id, item_ids, model, k=10, blocked_items=None):
    logger.info(
        f"üîπ T√≠nh to√°n g·ª£i √Ω cho user={user_id}, top_k={k}, blocked={len(blocked_items or [])}"
    )

    if model is None:
        return [{"error": "Model not loaded"}]
    if not item_ids:
        return [{"error": "No items available"}]

    blocked_set = set(blocked_items or [])
    valid_items = [iid for iid in item_ids if iid not in blocked_set]
    if not valid_items:
        return [{"error": "No valid items after filtering blocked items"}]

    predictions = []
    # Ch·ªâ t√≠nh to√°n rating cho c√°c item ch∆∞a t∆∞∆°ng t√°c (ho·∫∑c ch∆∞a b·ªã ch·∫∑n)
    for iid in valid_items:
        try:
            # model.predict s·∫Ω ∆∞·ªõc t√≠nh rating (est)
            pred = model.predict(uid=user_id, iid=iid).est
            predictions.append((iid, pred))
        except Exception as e:
            # B·ªè qua item n·∫øu c√≥ l·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n (√≠t x·∫£y ra v·ªõi surprise)
            logger.warning(f"‚ö†Ô∏è B·ªè qua item {iid} cho user {user_id}: {e}")
            continue

    if not predictions:
        logger.warning(f"‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c g·ª£i √Ω n√†o cho user {user_id}.")
        return [{"error": "No predictions could be made"}]

    # S·∫Øp x·∫øp v√† l·∫•y top K
    predictions.sort(key=lambda x: x[1], reverse=True)
    top_predictions = predictions[: min(k, len(predictions))]
    logger.info(f"‚úÖ Tr·∫£ v·ªÅ {len(top_predictions)} g·ª£i √Ω cho user {user_id}.")
    return [
        {"item_id": iid, "predicted_rating": round(r, 2)}
        for iid, r in top_predictions
    ]


# ====== API /recommend (POST) ======
@app.route("/recommend", methods=["POST"])
def recommend():
    logger.info("üì© Nh·∫≠n y√™u c·∫ßu POST /recommend")
    try:
        # force=True cho ph√©p ƒë·ªçc data ngay c·∫£ khi Content-Type kh√¥ng ph·∫£i application/json
        data = request.get_json(force=True) 
        logger.info(f"üì¶ Payload nh·∫≠n ƒë∆∞·ª£c: {data}")
    except Exception:
        logger.error("‚ùå Payload kh√¥ng h·ª£p l·ªá.")
        return jsonify({"error": "Invalid JSON payload"}), 400

    user_id = data.get("user_id")
    k = data.get("top_k", 10)
    # Default blocked_items ƒë·ªÉ test
    blocked_items = data.get("blocked_items", ["B00K30H3O8"]) 

    if not user_id:
        return jsonify({"error": "user_id is required"}), 400
    if topk_model is None:
        logger.error("‚ùå Model ch∆∞a ƒë∆∞·ª£c load.")
        return jsonify({"error": "Model not loaded on server"}), 500
    if not item_ids:
        logger.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu item kh·∫£ d·ª•ng.")
        return jsonify({"error": "No items available (check data file)"}), 500

    try:
        k = max(1, int(k))
    except (ValueError, TypeError):
        return jsonify({"error": "top_k must be a positive integer"}), 400

    if not all(isinstance(iid, str) for iid in blocked_items):
        return jsonify({"error": "blocked_items must contain valid string IDs"}), 400

    recommendations = get_top_k_recommendations(
        user_id, item_ids, topk_model, k, blocked_items
    )

    if "error" in recommendations[0]:
        logger.warning(f"‚ö†Ô∏è L·ªói khi t·∫°o g·ª£i √Ω cho user {user_id}: {recommendations[0]}")
        return jsonify(recommendations[0]), 500

    # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ƒë·∫ßu ra
    results = [
        {
            "user_id": user_id,
            "parent_asin": rec["item_id"],
            "predicted_rating": rec["predicted_rating"],
        }
        for rec in recommendations
    ]

    logger.info(f"‚úÖ Ho√†n t·∫•t tr·∫£ k·∫øt qu·∫£ cho user {user_id}.")
    return jsonify(results), 200


# ====== API /health (GET) ======
@app.route("/health", methods=["GET"])
def health():
    logger.info("üîç Ki·ªÉm tra t√¨nh tr·∫°ng h·ªá th·ªëng (/health)")
    return (
        jsonify(
            {
                "status": "healthy",
                "model_loaded": topk_model is not None,
                "items_count": len(item_ids),
            }
        ),
        200,
    )


if __name__ == "__main__":
    # D√πng c·ªïng t·ª´ bi·∫øn m√¥i tr∆∞·ªùng PORT (Railway s·∫Ω cung c·∫•p) ho·∫∑c m·∫∑c ƒë·ªãnh 8000
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"üöÄ Server ƒëang ch·∫°y t·∫°i http://0.0.0.0:{port}")
    # Khi ch·∫°y c·ª•c b·ªô, d√πng app.run. Trong Docker, Gunicorn s·∫Ω ch·∫°y app.
    app.run(host="0.0.0.0", port=port)